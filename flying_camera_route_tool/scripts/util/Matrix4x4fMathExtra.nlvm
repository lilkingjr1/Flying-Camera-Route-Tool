public static void matrixToEuler(Matrix4x4f m, Vector3f e){
	// Assuming the angles are in radians.
	if (m.elemAt(2,1) > 0.998f){ // singularity at north pole
		e.x = (float) (Math.PI/2); // attitude
		e.y = 0.f; // bank
		e.z = (float) (Math.atan2((double) m.elemAt(0,2), (double) m.elemAt(0,0))); // heading
		return;
	}
	if (m.elemAt(1,0) < -0.998f) { // singularity at south pole
		e.x = (float) (-Math.PI/2); // attitude
		e.y = 0.f; // bank
		e.z = (float) (Math.atan2((double) m.elemAt(0,2), (double) m.elemAt(0,0))); // heading
		return;
	}
	e.x = (float) (Math.asin((double) -m.elemAt(2,1))); // attitude
	e.y = (float) (Math.atan2((double) m.elemAt(2,0), (double) m.elemAt(2,2))); // bank
	e.z = (float) (Math.atan2((double) m.elemAt(0,1), (double) m.elemAt(1,1))); // heading
}

public static void eulerToMatrix(Vector3f e, Matrix4x4f m){
	// Assuming the angles are in radians.
	float ch = (float) (Math.cos((double) e.y));
	float sh = (float) (Math.sin((double) e.y));
	float ca = (float) (Math.cos((double) e.x));
	float sa = (float) (Math.sin((double) e.x));
	float cb = (float) (Math.cos((double) e.z));
	float sb = (float) (Math.sin((double) e.z));

	m.setElemAt(0,0, ch * ca);
	m.setElemAt(0,1, sh*sb - ch*sa*cb);
	m.setElemAt(0,2, ch*sa*sb + sh*cb);
	m.setElemAt(1,0, sa);
	m.setElemAt(1,1, ca*cb);
	m.setElemAt(1,2, -ca*sb);
	m.setElemAt(2,0, -sh*ca);
	m.setElemAt(2,1, sh*sa*cb + ch*sb);
	m.setElemAt(2,2, -sh*sa*sb + ch*cb);
}